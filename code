import random

def generate_random_sequence(length):
    sequence = []
    for _ in range(length):
        bit = random.choice([0, 1])
        sequence.append(bit)
    return sequence

def monobit_test(sequence):
    ones_count = sequence.count(1)
    zeros_count = sequence.count(0)
    total_bits = len(sequence)
    lower_bound = 0.9654 * total_bits
    upper_bound = 1.0346 * total_bits
    return lower_bound <= ones_count <= upper_bound and lower_bound <= zeros_count <= upper_bound

def longest_series_test(sequence):
    longest_zeros = max(map(len, ''.join(map(str, sequence)).split('1')))
    longest_ones = max(map(len, ''.join(map(str, sequence)).split('0')))
    return longest_zeros <= 36 and longest_ones <= 36

def poker_test(sequence):
    m = 4
    k = len(sequence) // m
    counts = [0] * (2 ** m)
    for i in range(k):
        block = ''.join(map(str, sequence[i * m : (i + 1) * m]))
        counts[int(block, 2)] += 1
    x3 = (16 / k) * sum([(count ** 2) for count in counts]) - k
    return 1.03 <= x3 <= 57.4

def series_test(sequence):
    series_lengths = [1, 2, 3, 4, 5, 6]
    expected_intervals = [
        (2267, 2733),
        (1079, 1421),
        (502, 748),
        (223, 402),
        (90, 223),
        (90, 223)
    ]
    counts = [0] * len(series_lengths)
    current_length = 1
    for i in range(1, len(sequence)):
        if sequence[i] == sequence[i - 1]:
            current_length += 1
        else:
            if current_length >= series_lengths[-1]:
                counts[-1] += 1
            else:
                for j, length in enumerate(series_lengths):
                    if current_length == length:
                        counts[j] += 1
                        break
            current_length = 1
    if current_length >= series_lengths[-1]:
        counts[-1] += 1
    else:
        for j, length in enumerate(series_lengths):
            if current_length == length:
                counts[j] += 1
                break
    return all(interval[0] <= count <= interval[1] for count, interval in zip(counts, expected_intervals))

# Тестування

num_sequences = 10

for _ in range(num_sequences):
    sequence_length = random.randint(1000, 20001)
    sequence = generate_random_sequence(sequence_length)
    print("Sequence:", sequence)
    print("Monobit Test:", monobit_test(sequence))
    print("Longest Series Test:", longest_series_test(sequence))
    print("Poker Test:", poker_test(sequence))
    print("Series Test:", series_test(sequence))
